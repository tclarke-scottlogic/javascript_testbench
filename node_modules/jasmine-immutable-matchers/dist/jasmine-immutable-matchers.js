(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("immutable"));
	else if(typeof define === 'function' && define.amd)
		define(["immutable"], factory);
	else if(typeof exports === 'object')
		exports["jasmine-immutable-matchers"] = factory(require("immutable"));
	else
		root["jasmine-immutable-matchers"] = factory(root["Immutable"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_3__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _matchers = __webpack_require__(1);

Object.keys(_matchers).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _matchers[key];
    }
  });
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toEqualImmutable = exports.toBeImmutableSeq = exports.toBeImmutableStack = exports.toBeImmutableOrderedSet = exports.toBeImmutableSet = exports.toBeImmutableOrderedMap = exports.toBeImmutableMap = exports.toBeImmutableList = exports.toBeOrderedImmutable = exports.toBeAssociativeImmutable = exports.toBeIndexedImmutable = exports.toBeKeyedImmutable = exports.toBeIterableImmutable = exports.toBeImmutable = undefined;

var _immutable = __webpack_require__(3);

var Immutable = _interopRequireWildcard(_immutable);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var comparator = function comparator(func) {
  return function () {
    return {
      compare: func
    };
  };
};

var toString = function toString(obj) {
  return obj && typeof obj.toString === 'function' ? obj.toString() : obj;
};

var toBeImmutable = exports.toBeImmutable = comparator(function (actual) {
  var pass = Immutable.Iterable.isIterable(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be immutable';
  return { pass: pass, message: message };
});

var toBeIterableImmutable = exports.toBeIterableImmutable = comparator(function (actual) {
  var pass = Immutable.Iterable.isIterable(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an iterable immutable';
  return { pass: pass, message: message };
});

var toBeKeyedImmutable = exports.toBeKeyedImmutable = comparator(function (actual) {
  var pass = Immutable.Iterable.isKeyed(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be a keyed immutable';
  return { pass: pass, message: message };
});

var toBeIndexedImmutable = exports.toBeIndexedImmutable = comparator(function (actual) {
  var pass = Immutable.Iterable.isIndexed(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an indexed immutable';
  return { pass: pass, message: message };
});

var toBeAssociativeImmutable = exports.toBeAssociativeImmutable = comparator(function (actual) {
  var pass = Immutable.Iterable.isAssociative(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an associative immutable';
  return { pass: pass, message: message };
});

var toBeOrderedImmutable = exports.toBeOrderedImmutable = comparator(function (actual) {
  var pass = Immutable.Iterable.isOrdered(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an ordered immutable';
  return { pass: pass, message: message };
});

var toBeImmutableList = exports.toBeImmutableList = comparator(function (actual) {
  var pass = Immutable.List.isList(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an immutable list';
  return { pass: pass, message: message };
});

var toBeImmutableMap = exports.toBeImmutableMap = comparator(function (actual) {
  var pass = Immutable.Map.isMap(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an immutable map';
  return { pass: pass, message: message };
});

var toBeImmutableOrderedMap = exports.toBeImmutableOrderedMap = comparator(function (actual) {
  var pass = Immutable.OrderedMap.isOrderedMap(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an immutable ordered map';
  return { pass: pass, message: message };
});

var toBeImmutableSet = exports.toBeImmutableSet = comparator(function (actual) {
  var pass = Immutable.Set.isSet(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an immutable set';
  return { pass: pass, message: message };
});

var toBeImmutableOrderedSet = exports.toBeImmutableOrderedSet = comparator(function (actual) {
  var pass = Immutable.OrderedSet.isOrderedSet(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an immutable ordered set';
  return { pass: pass, message: message };
});

var toBeImmutableStack = exports.toBeImmutableStack = comparator(function (actual) {
  var pass = Immutable.Stack.isStack(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an immutable stack';
  return { pass: pass, message: message };
});

var toBeImmutableSeq = exports.toBeImmutableSeq = comparator(function (actual) {
  var pass = Immutable.Seq.isSeq(actual);
  var message = 'Expected ' + toString(actual) + (pass ? ' not' : '') + ' to be an immutable sequence';
  return { pass: pass, message: message };
});

var toEqualImmutable = exports.toEqualImmutable = comparator(function (actual, expected) {
  var pass = Immutable.is(actual, expected);
  var message = 'Expected\n' + toString(actual) + '\n' + (pass ? ' not' : '') + ' to equal\n' + toString(expected) + '\n';
  return { pass: pass, message: message };
});

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _customImmutableMatchers = __webpack_require__(0);

Object.keys(_customImmutableMatchers).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _customImmutableMatchers[key];
    }
  });
});

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ })
/******/ ]);
});